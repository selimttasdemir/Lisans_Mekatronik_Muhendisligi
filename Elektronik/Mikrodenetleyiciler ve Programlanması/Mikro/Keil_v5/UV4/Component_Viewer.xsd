<?xml version="1.0" encoding="utf-8"?>
<!-- 
  Copyright (c) 2015 ARM Ltd.
 
  This software is provided 'as-is', without any express or implied warranty. 
  In no event will the authors be held liable for any damages arising from 
  the use of this software. Permission is granted to anyone to use this 
  software for any purpose, including commercial applications, and to alter 
  it and redistribute it freely, subject to the following restrictions:
 
  1. The origin of this software must not be misrepresented; you must not 
     claim that you wrote the original software. If you use this software in
     a product, an acknowledgment in the product documentation would be 
     appreciated but is not required. 
  
  2. Altered source versions must be plainly marked as such, and must not be 
     misrepresented as being the original software. 
  
  3. This notice may not be removed or altered from any source distribution.
 
  $Date:        12. Apr. 2016
  $Revision:    0.0.2

  $Project: Schema File for Component Viewer Description File Format Specification

  File naming convention <vendor>_<component_name>_<version>.scvd
  SchemaVersion=0.1

  12. Apr.2016
  - adding events section
  
  17.Dec.2015
  - first draft version
  
  
-->

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="qualified" version="0.1">
  <!-- Types -->
  <xs:complexType name="ComponentsType">
    <xs:attribute name="name" type="xs:string" use="required"/>
    <xs:attribute name="version" type="xs:string" use="optional"/>
  </xs:complexType>

  <xs:complexType name="CreateType">
    <xs:attribute name="name" type="xs:string" use="required"/>
  </xs:complexType>

  <xs:complexType name="OutputType">
    <xs:attribute name="name" type="xs:string" use="required"/>
    <xs:attribute name="value" type="xs:string" use="optional"/>
    <xs:attribute name="cond" type="xs:string" use="optional"/>
    <xs:attribute name="skip" type="xs:string" use="optional"/>
  </xs:complexType>

  <xs:complexType name="DropType">
    <xs:sequence>
      <xs:element name="output" type="OutputType"/>
    </xs:sequence>
    <xs:attribute name="name"  type="xs:string" use="required"/>
    <xs:attribute name="type"  type="xs:string" use="required"/>
    <xs:attribute name="value" type="xs:string" use="required"/>
  </xs:complexType>

  <xs:complexType name="EnumType">
    <xs:attribute name="name" type="xs:string"/>
    <xs:attribute name="value" type="xs:string"/>  <!-- TODO refine to value hex, decimal, etc. -->
    <xs:attribute name="info" type="xs:string"/>
  </xs:complexType>
  
  <xs:complexType name="MemberType">
    <xs:sequence>
      <xs:element name="enum" type="EnumType" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="name"   type="xs:string" use="required"/>
    <xs:attribute name="type"   type="xs:string" use="required"/>
    <xs:attribute name="offset" type="xs:string" use="required"/>
    <xs:attribute name="size"   type="xs:string" use="optional"/>
    <xs:attribute name="info"   type="xs:string" use="optional"/>
  </xs:complexType>

  <xs:complexType name="VarType">
    <xs:attribute name="name"  type="xs:string"/>
    <xs:attribute name="value" type="xs:string"/>
    <xs:attribute name="type"  type="xs:string"/>
    <xs:attribute name="info"  type="xs:string" use="optional"/>
  </xs:complexType>

  <xs:complexType name="ReadType">
    <xs:attribute name="name" type="xs:string"   use="required"/>
    <xs:attribute name="type" type="xs:string"   use="required"/>
    <xs:attribute name="size" type="xs:string"   default="1"/>
    <xs:attribute name="offset" type="xs:string"/>
    <xs:attribute name="symbol" type="xs:string"/>
    <xs:attribute name="const"  type="xs:int"    default="0"/>
    <xs:attribute name="info"  type="xs:string"/>
    <xs:attribute name="cond" type="xs:string" use="optional"/>
  </xs:complexType>

  <xs:complexType name="ReadlistType">
    <xs:attribute name="name" type="xs:string" use="required"/>
    <xs:attribute name="type" type="xs:string" use="required"/>
    <xs:attribute name="count" type="xs:string" default="1"/>
    <xs:attribute name="next" type="xs:string"/>
    <xs:attribute name="offset" type="xs:string"/>
    <xs:attribute name="symbol" type="xs:string"/>
    <xs:attribute name="const"  type="xs:int" default="0"/>
    <xs:attribute name="info"  type="xs:string" use="optional"/>
    <xs:attribute name="cond" type="xs:string" use="optional"/>
<!--<xs:attribute name="clear" type="xs:string" use="optional"/>   -removed-  -->
    <xs:attribute name="init" type="xs:boolean" use="optional" default="0"/>
    <xs:attribute name="based" type="xs:boolean" use="optional" default="0"/>
  </xs:complexType>

  <xs:complexType name="TypedefType">
    <xs:choice maxOccurs="unbounded">
      <xs:element name="member" type="MemberType"/>
      <xs:element name="var"    type="VarType"/>
    </xs:choice>
    <xs:attribute name="name" use="required"/>
    <xs:attribute name="size" use="optional"/>
    <xs:attribute name="const" default="0" use="optional"/>
    <xs:attribute name="info" use="optional"/>                
  </xs:complexType>

  <xs:complexType name="TypedefsType">
    <xs:sequence>
      <xs:element name="typedef" type="TypedefType" maxOccurs="unbounded"/>
    </xs:sequence>    
  </xs:complexType>

  <xs:complexType name="CalcType">
    <xs:simpleContent>
      <xs:extension base='xs:string'>
        <xs:attribute name="cond" type="xs:string" use="optional"/>
      </xs:extension>
      </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="ListTypeO">
    <xs:choice  minOccurs="0" maxOccurs="unbounded">
      <xs:element name="list" type="ListTypeO"/>
      <xs:element name="readlist" type="ReadlistType"/>
      <xs:element name="read" type="ReadType"/>
<!--  <xs:element name="addr" type="ReadType"/>    -removed-    -->
      <xs:element name="var"  type="VarType"/>
      <xs:element name="calc"  type="CalcType"/>
    </xs:choice>
    <xs:attribute name="name" type="xs:string" use="required"/>
    <xs:attribute name="start" type="xs:string" use="required"/>
    <xs:attribute name="limit" type="xs:string"/>
    <xs:attribute name="while" type="xs:string"/>
    <xs:attribute name="cond" type="xs:string" use="optional"/>
<!--<xs:attribute name="skip" type="xs:string" use="optional"/>  -removed- -->
  </xs:complexType>

  <xs:complexType name="ObjectType">
    <xs:choice maxOccurs="unbounded">
      <xs:element name="list" type="ListTypeO"/>
      <xs:element name="readlist" type="ReadlistType"/>
      <xs:element name="read" type="ReadType"/>
      <xs:element name="addr" type="ReadType"/>
      <xs:element name="var"  type="VarType"/>
      <xs:element name="calc"  type="CalcType"/>
      <xs:element name="out" type="OutType"/>
    </xs:choice>
    <xs:attribute name="name" type="xs:string" use="required"/>
  </xs:complexType>

  <xs:complexType name="ObjectsType">
    <xs:sequence maxOccurs="unbounded">
      <xs:element name="object" type="ObjectType"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="ItemType">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="item" type="ItemType"/>
      <xs:element name="output" type="OutputType"/>
      <xs:element name="list" type="ListType"/>
    </xs:choice>
    <xs:attribute name="property" type="xs:string"/>
    <xs:attribute name="value" type="xs:string"/>
    <xs:attribute name="info" type="xs:string"/>
    <xs:attribute name="cond" type="xs:string" use="optional"/>
    <xs:attribute name="skip" type="xs:string" use="optional"/>
  </xs:complexType>

  <xs:complexType name="ListType">
    <xs:choice  minOccurs="0" maxOccurs="unbounded">
      <xs:element name="item" type="ItemType"/>
      <xs:element name="output" type="OutputType"/>
      <xs:element name="list" type="ListType"/>
    </xs:choice>
    <xs:attribute name="name" type="xs:string" use="required"/>
    <xs:attribute name="start" type="xs:string" use="required"/>
    <xs:attribute name="limit" type="xs:string"/>
    <xs:attribute name="while" type="xs:string"/>
    <xs:attribute name="cond" type="xs:string" use="optional"/>
    <xs:attribute name="skip" type="xs:string" use="optional"/>
  </xs:complexType>


  <xs:complexType name="OutType">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="item" type="ItemType"/>
      <xs:element name="output" type="OutputType"/>
      <xs:element name="list" type="ListType"/>
    </xs:choice>
    <xs:attribute name="name" type="xs:string"/>
    <xs:attribute name="value" type="xs:string"/>
    <xs:attribute name="type" type="xs:string"/>
    <xs:attribute name="cond" type="xs:string" use="optional"/>
    <xs:attribute name="skip" type="xs:string" use="optional"/>
  </xs:complexType>
  
  <xs:complexType name="OutsType">
    <xs:sequence>
      <xs:element name="out" type="OutType" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="ViewType">
    <xs:choice maxOccurs="unbounded">
      <xs:element name="create" type="CreateType" maxOccurs="unbounded"/>
      <xs:element name="output" type="OutputType" maxOccurs="unbounded"/>
      <xs:element name="drop"   type="DropType" minOccurs="0"/>
    </xs:choice>
  </xs:complexType>
 
  <xs:complexType name="EventAssignType">
    <xs:sequence>
      <xs:element name="until" maxOccurs="unbounded">
        <xs:complexType>
          <xs:attribute name="name"  type="xs:string" use="required"/>
          <xs:attribute name="val1"  type="xs:string"/>
          <xs:attribute name="val2"  type="xs:string"/>
          <xs:attribute name="val3"  type="xs:string"/>
          <xs:attribute name="val4"  type="xs:string"/>
          <xs:attribute name="val5"  type="xs:string"/>
          <xs:attribute name="val6"  type="xs:string"/>
        </xs:complexType>
        </xs:element>
      </xs:sequence>
    <xs:attribute name="name"  type="xs:string"/>
    <xs:attribute name="value" type="xs:string"/>
  </xs:complexType>
  
  <xs:complexType name="EventType">
    <xs:sequence>
      <xs:element name="assign" type="EventAssignType" minOccurs="0"/> <!-- optional -->
    </xs:sequence>
    <xs:attribute name="name"     type="xs:string" use="required"/>
    <xs:attribute name="id"       type="xs:string" use="required"/>
    <xs:attribute name="val1"     type="xs:string"/>
    <xs:attribute name="val2"     type="xs:string"/>
    <xs:attribute name="val3"     type="xs:string"/>
    <xs:attribute name="val4"     type="xs:string"/>
    <xs:attribute name="val5"     type="xs:string"/>
    <xs:attribute name="val6"     type="xs:string"/>
    <xs:attribute name="value"    type="xs:string" use="required"/>
    <xs:attribute name="property" type="xs:string"/>
    <xs:attribute name="info"     type="xs:string"/>
  </xs:complexType>

  <xs:complexType name="EventsType">
    <xs:sequence>
      <xs:element name="event" type="EventType" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  
  <!-- Entry Point-->
  <xs:element name="component_viewer" nillable="true">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded">
        <xs:element name="component" type="ComponentsType"/>
        <xs:element name="typedefs"  type="TypedefsType"  />
        <xs:element name="objects"   type="ObjectsType"   />
        <xs:element name="events"    type="EventsType"    />
      </xs:choice>
      <xs:attribute name="schemaVersion" type="xs:string"/>
    </xs:complexType>
  </xs:element>
</xs:schema>
